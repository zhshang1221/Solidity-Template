/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  OwnableWithoutContext,
  OwnableWithoutContextInterface,
} from "../../../contracts/utils/OwnableWithoutContext";
import type { Provider } from "@ethersproject/providers";
import { Contract, Signer, utils } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class OwnableWithoutContext__factory {
  static readonly abi = _abi;
  static createInterface(): OwnableWithoutContextInterface {
    return new utils.Interface(_abi) as OwnableWithoutContextInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnableWithoutContext {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as OwnableWithoutContext;
  }
}
